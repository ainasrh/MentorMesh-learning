
services:
  # database
  db:
    image: postgres:latest
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}  
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mentormesh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U MeshAdmin -d MentorMesh"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s  

  # nginx
  nginx:
    image: nginx:alpine
    container_name: api-gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - userservices
      - course_service
    networks:
      - mentormesh

  # rabbitmq
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mentormesh

    #Redis  
  redis:
  # acces redis providing image
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mentormesh
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery_worker:
    build:
      context: ./user_services
    command: bash -c "
      while ! pg_isready -h db -U $DB_USER -d $DB_NAME -t 1; do
        echo 'Waiting for DB in celery_worker...';
        sleep 2;
      done;
      celery -A user_services worker --loglevel=info
      "
      
    env_file:
      - .env
    volumes:
      - ./user_services:/app
    depends_on:
      redis:
        condition: service_healthy
      userservices:
        condition: service_started
      course_service:
        condition: service_started
    networks:
      - mentormesh

  celery-beat:
    build:
      context: ./user_services
      dockerfile: Dockerfile
    command: bash -c "
      echo 'Waiting for DB in celery-beat...';
      while ! pg_isready -h db -U MeshAdmin -d MentorMesh -t 1; do
        echo 'DB not ready...';
        sleep 2;
      done;
      echo 'DB is ready, starting celery beat...';
      celery -A user_services beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      userservices:
        condition: service_started
    env_file:
      - .env
    volumes:
      - ./user_services:/app
    networks:
      - mentormesh



  # user service
  userservices:
    build:
      context: ./user_services
    container_name: user_services
    command: bash -c "
      while ! pg_isready -h db -U MeshAdmin -d MentorMesh -t 1; do
        echo 'Waiting for database...';
        sleep 2;
      done;
      python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0.0:8001 &
      python users/rabbitmq_consumer.py &
      wait -n
      "
    volumes:
      - ./user_services:/app
      - ./media:/app/media
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - mentormesh

  # course service
  course_service:
    build:
      context: ./course_service
    container_name: course_service
    command: bash -c "
      while ! pg_isready -h db -U MeshAdmin -d MentorMesh -t 1; do
        echo 'Waiting for database...';
        sleep 2;
      done;
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0.0:8002 &
      python course/courses_consumer.py &
      python course/trainerEnrolled_consumer.py &
      python course/allCourse_consumer.py 
      "
    volumes:
      - ./course_service:/app
      - ./media:/app/media
    ports:
      - "8002:8002"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    networks:
      - mentormesh

  # payment service
  payment_service:
    build:
      context: ./payment_service
    container_name: payment_service
    command: bash -c "
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0.0:8003
      "
    ports:
      - "8003:8003"
    volumes:
      - ./payment_service:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - mentormesh
  
  notification_service:
    build:
      context: ./notification_service
    container_name: notification_service
    command: bash -c "
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0.0:8004 
      "
    ports:
      - "8004:8004"
    volumes:
      - ./notification_service:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - mentormesh 
  
  # chat_service
  chat_service:
    build:
      context: ./chat_service
    container_name: chat_service
    command: bash -c "
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0:8005
      "
    ports:
      - "8005:8005"
    volumes:
      - ./chat_service:/app
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - mentormesh
  
  chatbot_service:
    build:
      context: ./chatbot_service
    container_name: chatbot_service
    ports:
      - "8006:8006"
    volumes:
      - ./chatbot_service:/app
    env_file:
      - .env
    networks:
      - mentormesh

    


volumes:
  postgres_data:

networks:
  mentormesh:
    driver: bridge
